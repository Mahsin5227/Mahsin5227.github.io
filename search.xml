<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Mybatis框架一</title>
      <link href="/2019/04/15/Mybatis-%E6%A1%86%E6%9E%B6%E4%B8%80/"/>
      <url>/2019/04/15/Mybatis-%E6%A1%86%E6%9E%B6%E4%B8%80/</url>
      
        <content type="html"><![CDATA[<h2 id="1-什么是Mybatis"><a href="#1-什么是Mybatis" class="headerlink" title="1 什么是Mybatis"></a>1 什么是Mybatis</h2><blockquote><p>MyBatis 是一款优秀的持久层框架，它支持定制化 SQL、存储过程以及高级映射。MyBatis<br>避免了几乎所有的 JDBC 代码和手动设置参数以及获取结果集。MyBatis<br>可以使用简单的 XML 或注解来配置和映射原生类型、接口和 Java 的 POJO（Plain Old<br>Java Objects，普通老式 Java 对象）为数据库中的记录。</p><p>官网介绍: <a href="http://www.mybatis.org/mybatis-3/zh/index.html" title="Mybatis" target="_blank" rel="noopener">Myabtis</a></p></blockquote><h2 id="2-快速使用"><a href="#2-快速使用" class="headerlink" title="2 快速使用"></a>2 快速使用</h2><h3 id="2-1-引入依赖-pom-xml"><a href="#2-1-引入依赖-pom-xml" class="headerlink" title="2.1 引入依赖 (pom.xml)"></a>2.1 引入依赖 (pom.xml)</h3><p>要使用 MyBatis， 只需将       <a href="https://github.com/mybatis/mybatis-3/releases" target="_blank" rel="noopener">mybatis-x.x.x.jar</a>       文件置于 classpath 中即可。</p><p>如果使用 Maven 来构建项目，则需将下面的 dependency 代码置于 pom.xml 文件中：</p><pre><code class="xml">&lt;dependency&gt;  &lt;groupId&gt;org.mybatis&lt;/groupId&gt;  &lt;artifactId&gt;mybatis&lt;/artifactId&gt;  &lt;version&gt;x.x.x&lt;/version&gt;&lt;/dependency&gt;</code></pre><h3 id="2-2-配置全局文件（mybatis-config-xml）"><a href="#2-2-配置全局文件（mybatis-config-xml）" class="headerlink" title="2.2 配置全局文件（mybatis-config.xml）"></a>2.2 配置全局文件（mybatis-config.xml）</h3><h4 id="属性设置"><a href="#属性设置" class="headerlink" title="属性设置"></a>属性设置</h4><p>如果属性在不只一个地方进行了配置，那么 MyBatis 将按照下面的顺序来加载：</p><ul><li>在 properties 元素体内指定的属性首先被读取。</li><li>然后根据 properties 元素中的 resource 属性读取类路径下属性文件或根据 url 属性指定的路径读取属性文件，并覆盖已读取的同名属性。</li><li>最后读取作为方法参数传递的属性，并覆盖已读取的同名属性。 </li></ul><p>因此，通过方法参数传递的属性具有最高优先级，resource/url 属性中指定的配置文件次之，最低优先级的是 properties 属性中指定的属性。</p><pre><code class="xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;&lt;!DOCTYPE configuration        PUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot;        &quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;&gt;&lt;configuration&gt;    &lt;!-- 属性设置--&gt;    &lt;!--这些属性都是可外部配置且可动态替换的，既可以在典型的 Java 属性文件中配置(config.properties)，亦可通过 properties 元素的子元素来传递。--&gt;    &lt;properties resource=&quot;/resource/config.properties&quot;&gt;        &lt;property name=&quot;username&quot; value=&quot;dev_user&quot;/&gt;        &lt;property name=&quot;password&quot; value=&quot;F2Fa3!33TYyg&quot;/&gt;    &lt;/properties&gt;    &lt;!--上面的属性就可以在整个配置文件中被用来替换需要动态配置的属性值--&gt;    &lt;environments default=&quot;development&quot;&gt;        &lt;environment id=&quot;development&quot;&gt;            &lt;transactionManager type=&quot;JDBC&quot;/&gt;            &lt;dataSource type=&quot;POOLED&quot;&gt;                &lt;property name=&quot;driver&quot; value=&quot;${driver}&quot;/&gt;                &lt;property name=&quot;url&quot; value=&quot;${url}&quot;/&gt;                &lt;property name=&quot;username&quot; value=&quot;${username}&quot;/&gt;                &lt;property name=&quot;password&quot; value=&quot;${password}&quot;/&gt;            &lt;/dataSource&gt;        &lt;/environment&gt;    &lt;/environments&gt;    &lt;!--映射文件--&gt;    &lt;mappers&gt;        &lt;mapper resource=&quot;org/mybatis/example/BlogMapper.xml&quot;/&gt;    &lt;/mappers&gt;&lt;/configuration&gt;</code></pre><h3 id="2-3-设置（Settings）"><a href="#2-3-设置（Settings）" class="headerlink" title="2.3 设置（Settings）"></a>2.3 设置（Settings）</h3><p>这是 MyBatis 中极为重要的调整设置，它们会改变 MyBatis 的运行时行为。<br>下表描述了设置中各项的意图、默认值等。</p><p>详细说明见官网 <a href="http://www.mybatis.org/mybatis-3/zh/configuration.html#mappers" target="_blank" rel="noopener">Mybatis-mapper</a></p><p>一个配置完整的 settings 元素的示例如下：</p><pre><code class="xml">&lt;settings&gt;  &lt;setting name=&quot;cacheEnabled&quot; value=&quot;true&quot;/&gt;  &lt;setting name=&quot;lazyLoadingEnabled&quot; value=&quot;true&quot;/&gt;  &lt;setting name=&quot;multipleResultSetsEnabled&quot; value=&quot;true&quot;/&gt;  &lt;setting name=&quot;useColumnLabel&quot; value=&quot;true&quot;/&gt;  &lt;setting name=&quot;useGeneratedKeys&quot; value=&quot;false&quot;/&gt;  &lt;setting name=&quot;autoMappingBehavior&quot; value=&quot;PARTIAL&quot;/&gt;  &lt;setting name=&quot;autoMappingUnknownColumnBehavior&quot; value=&quot;WARNING&quot;/&gt;  &lt;setting name=&quot;defaultExecutorType&quot; value=&quot;SIMPLE&quot;/&gt;  &lt;setting name=&quot;defaultStatementTimeout&quot; value=&quot;25&quot;/&gt;  &lt;setting name=&quot;defaultFetchSize&quot; value=&quot;100&quot;/&gt;  &lt;setting name=&quot;safeRowBoundsEnabled&quot; value=&quot;false&quot;/&gt;  &lt;setting name=&quot;mapUnderscoreToCamelCase&quot; value=&quot;false&quot;/&gt;  &lt;setting name=&quot;localCacheScope&quot; value=&quot;SESSION&quot;/&gt;  &lt;setting name=&quot;jdbcTypeForNull&quot; value=&quot;OTHER&quot;/&gt;  &lt;setting name=&quot;lazyLoadTriggerMethods&quot; value=&quot;equals,clone,hashCode,toString&quot;/&gt;&lt;/settings&gt;</code></pre><p>当这样配置时，<code>Blog</code> 可以用在任何使用 <code>domain.blog.Blog</code> 的地方。</p><h3 id="2-4-类型别名（typeAliases）"><a href="#2-4-类型别名（typeAliases）" class="headerlink" title="2.4 类型别名（typeAliases）"></a>2.4 类型别名（typeAliases）</h3><p>类型别名是为 Java 类型设置一个短的名字。<br>它只和 XML 配置有关，存在的意义仅在于用来减少类完全限定名的冗余。例如：</p><pre><code class="xml">&lt;typeAliases&gt;  &lt;typeAlias alias=&quot;Author&quot; type=&quot;domain.blog.Author&quot;/&gt;  &lt;typeAlias alias=&quot;Blog&quot; type=&quot;domain.blog.Blog&quot;/&gt;  &lt;typeAlias alias=&quot;Comment&quot; type=&quot;domain.blog.Comment&quot;/&gt;  &lt;typeAlias alias=&quot;Post&quot; type=&quot;domain.blog.Post&quot;/&gt;  &lt;typeAlias alias=&quot;Section&quot; type=&quot;domain.blog.Section&quot;/&gt;  &lt;typeAlias alias=&quot;Tag&quot; type=&quot;domain.blog.Tag&quot;/&gt;&lt;/typeAliases&gt;</code></pre><h3 id="2-5-映射器（Mappers）"><a href="#2-5-映射器（Mappers）" class="headerlink" title="2.5 映射器（Mappers）"></a>2.5 映射器（Mappers）</h3><p>既然 MyBatis 的行为已经由上述元素配置完了，我们现在就要定义 SQL 映射语句了。<br>但是首先我们需要告诉 MyBatis 到哪里去找到这些语句。<br>Java 在自动查找这方面没有提供一个很好的方法，所以最佳的方式是告诉 MyBatis 到哪里去找映射文件。<br>你可以使用相对于类路径的资源引用，<br>或完全限定资源定位符（包括 <code>file:///</code> 的 URL），或类名和包名等。例如：</p><pre><code class="xml">&lt;!-- 使用相对于类路径的资源引用 --&gt;&lt;mappers&gt;  &lt;mapper resource=&quot;org/mybatis/builder/AuthorMapper.xml&quot;/&gt;  &lt;mapper resource=&quot;org/mybatis/builder/BlogMapper.xml&quot;/&gt;  &lt;mapper resource=&quot;org/mybatis/builder/PostMapper.xml&quot;/&gt;&lt;/mappers&gt;</code></pre><h2 id="3-简单示例"><a href="#3-简单示例" class="headerlink" title="3 简单示例"></a>3 简单示例</h2><h3 id="1-首先创建一个Maven项目-mybatis-demo"><a href="#1-首先创建一个Maven项目-mybatis-demo" class="headerlink" title="1 首先创建一个Maven项目 mybatis-demo"></a>1 首先创建一个Maven项目 mybatis-demo</h3><h3 id="2-添加依赖-pom-xml"><a href="#2-添加依赖-pom-xml" class="headerlink" title="2 添加依赖(pom.xml)"></a>2 添加依赖(pom.xml)</h3><pre><code class="xml">&lt;dependency&gt;    &lt;groupId&gt;mysql&lt;/groupId&gt;    &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;    &lt;version&gt;5.1.32&lt;/version&gt;&lt;/dependency&gt;&lt;dependency&gt;    &lt;groupId&gt;org.mybatis&lt;/groupId&gt;    &lt;artifactId&gt;mybatis&lt;/artifactId&gt;    &lt;version&gt;3.2.8&lt;/version&gt;&lt;/dependency&gt;&lt;dependency&gt;    &lt;groupId&gt;org.slf4j&lt;/groupId&gt;    &lt;artifactId&gt;slf4j-log4j12&lt;/artifactId&gt;    &lt;version&gt;1.7.5&lt;/version&gt;&lt;/dependency&gt;&lt;dependency&gt;    &lt;groupId&gt;junit&lt;/groupId&gt;    &lt;artifactId&gt;junit&lt;/artifactId&gt;    &lt;version&gt;4.11&lt;/version&gt;    &lt;scope&gt;test&lt;/scope&gt;&lt;/dependency&gt;</code></pre><h3 id="3-创建User实体类"><a href="#3-创建User实体类" class="headerlink" title="3  创建User实体类"></a>3  创建User实体类</h3><pre><code class="java">package com.mahsin.model;import java.text.SimpleDateFormat;import java.util.Date;public class User {    private String id;    private String userName;    private String password;    private String name;    private Integer age;    private Integer sex;    private Date birthday;    private String created;    private String updated;    public String getId() {        return id;    }    public void setId(String id) {        this.id = id;    }    public String getUserName() {        return userName;    }    public void setUserName(String userName) {        this.userName = userName;    }    public String getPassword() {        return password;    }    public void setPassword(String password) {        this.password = password;    }    public String getName() {        return name;    }    public void setName(String name) {        this.name = name;    }    public Integer getAge() {        return age;    }    public void setAge(Integer age) {        this.age = age;    }    public Integer getSex() {        return sex;    }    public void setSex(Integer sex) {        this.sex = sex;    }    public Date getBirthday() {        return birthday;    }    public void setBirthday(Date birthday) {        this.birthday = birthday;    }    public String getCreated() {        return created;    }    public void setCreated(String created) {        this.created = created;    }    public String getUpdated() {        return updated;    }    public void setUpdated(String updated) {        this.updated = updated;    }    @Override    public String toString() {        return &quot;User{&quot; + &quot;id=&#39;&quot; + id + &#39;\&#39;&#39; + &quot;, userName=&#39;&quot; + userName + &#39;\&#39;&#39; + &quot;, password=&#39;&quot; + password + &#39;\&#39;&#39; + &quot;, name=&#39;&quot; + name + &#39;\&#39;&#39; + &quot;, age=&quot; + age + &quot;, sex=&quot; + sex + &quot;, birthday=&#39;&quot; + new SimpleDateFormat(&quot;yyyy-MM-dd&quot;).format(birthday) + &#39;\&#39;&#39; + &quot;, created=&#39;&quot; + created + &#39;\&#39;&#39; + &quot;, updated=&#39;&quot; + updated + &#39;\&#39;&#39; + &#39;}&#39;;    }}</code></pre><h3 id="4-创建-UserDao接口"><a href="#4-创建-UserDao接口" class="headerlink" title="4 创建 UserDao接口"></a>4 创建 UserDao接口</h3><pre><code class="java">import com.mahsin.model.User;import java.util.List;public interface IUserDao {    User findById(int id);    List&lt;User&gt; listAll();}</code></pre><h3 id="5-创建-UserMapper-xml"><a href="#5-创建-UserMapper-xml" class="headerlink" title="5 创建 UserMapper.xml"></a>5 创建 UserMapper.xml</h3><pre><code class="xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;!DOCTYPE mapper PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;        &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;&lt;mapper namespace=&quot;com.mahsin.dao.user.IUserDao&quot;&gt;    &lt;select id=&quot;findById&quot; resultType=&quot;com.mahsin.model.User&quot;&gt;        select id,name from tb_user where id = #{id}    &lt;/select&gt;    &lt;select id=&quot;listAll&quot; resultType=&quot;com.mahsin.model.User&quot;&gt;        select * from  tb_user    &lt;/select&gt;&lt;/mapper&gt;</code></pre><h3 id="6-数据库配置文件（config-properties）"><a href="#6-数据库配置文件（config-properties）" class="headerlink" title="6 数据库配置文件（config.properties）"></a>6 数据库配置文件（config.properties）</h3><pre><code class="properties">driver = com.mysql.jdbc.Driverurl = jdbc:mysql://127.0.0.1:3306/db_demousername = rootpassword = root</code></pre><h3 id="7-全局配置文件-mybatis-config-xml"><a href="#7-全局配置文件-mybatis-config-xml" class="headerlink" title="7 全局配置文件(mybatis-config.xml)"></a>7 全局配置文件(mybatis-config.xml)</h3><pre><code class="xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;&lt;!DOCTYPE configuration        PUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot;        &quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;&gt;&lt;configuration&gt;    &lt;!-- 属性设置--&gt;    &lt;!--这些属性都是可外部配置且可动态替换的，既可以在典型的 Java 属性文件中配置(config.properties)，亦可通过 properties 元素的子元素来传递。--&gt;    &lt;properties resource=&quot;config.properties&quot;&gt;    &lt;/properties&gt;    &lt;settings&gt;        &lt;setting name=&quot;mapUnderscoreToCamelCase&quot; value=&quot;true&quot;/&gt;    &lt;/settings&gt;    &lt;!--上面的属性就可以在整个配置文件中被用来替换需要动态配置的属性值--&gt;    &lt;environments default=&quot;development&quot;&gt;        &lt;environment id=&quot;development&quot;&gt;            &lt;transactionManager type=&quot;JDBC&quot;/&gt;            &lt;dataSource type=&quot;POOLED&quot;&gt;                &lt;property name=&quot;driver&quot; value=&quot;${driver}&quot;/&gt;                &lt;property name=&quot;url&quot; value=&quot;${url}&quot;/&gt;                &lt;property name=&quot;username&quot; value=&quot;${username}&quot;/&gt;                &lt;property name=&quot;password&quot; value=&quot;${password}&quot;/&gt;            &lt;/dataSource&gt;        &lt;/environment&gt;    &lt;/environments&gt;    &lt;!--映射文件--&gt;    &lt;mappers&gt;        &lt;mapper resource=&quot;mappers/UserMapper.xml&quot;/&gt;    &lt;/mappers&gt;&lt;/configuration&gt;</code></pre><h3 id="8-测试"><a href="#8-测试" class="headerlink" title="8 测试"></a>8 测试</h3><pre><code class="java">package com.mahsin.dao;import com.mahsin.model.User;import org.apache.ibatis.io.Resources;import org.apache.ibatis.session.SqlSession;import org.apache.ibatis.session.SqlSessionFactory;import org.apache.ibatis.session.SqlSessionFactoryBuilder;import org.junit.Before;import org.junit.Test;import java.io.InputStream;import java.util.List;public class IUserDaoTest {    public SqlSession sqlSession;    @Before    public void setUp() throws Exception {        String resource = &quot;mybatis-config.xml&quot;;        InputStream inputStream = Resources.getResourceAsStream(resource);        SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);        // 然后根据 sqlSessionFactory 得到 session        sqlSession = sqlSessionFactory.openSession();    }    @Test    public void findUserById() throws Exception {        List&lt;User&gt; list = sqlSession.selectList(&quot;listAll&quot;);        System.out.println(list.toString());    }}</code></pre><p><img src="/2019/04/15/Mybatis-框架一/1555329772661.png" alt="result"></p>]]></content>
      
      
      <categories>
          
          <category> JAVAWEB </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mybatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown学习笔记--开始使用Typora编辑器</title>
      <link href="/2019/04/02/Markdown%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0--%E5%BC%80%E5%A7%8B%E4%BD%BF%E7%94%A8Typora%E7%BC%96%E8%BE%91%E5%99%A8/"/>
      <url>/2019/04/02/Markdown%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0--%E5%BC%80%E5%A7%8B%E4%BD%BF%E7%94%A8Typora%E7%BC%96%E8%BE%91%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="一、什么是Markdown"><a href="#一、什么是Markdown" class="headerlink" title="一、什么是Markdown"></a>一、什么是Markdown</h1><blockquote><p>Markdown是一种可以使用普通文本编辑器编写的标记语言，通过简单的标记语法，它可以使普通文本内容具有一定的格式。</p><p>Markdown具有一系列衍生版本，用于扩展Markdown的功能（如表格、脚注、内嵌HTML等等），这些功能原初的Markdown尚不具备，它们能让Markdown转换成更多的格式，例如<a href="https://baike.baidu.com/item/LaTeX" target="_blank" rel="noopener">LaTeX</a>，<a href="https://baike.baidu.com/item/Docbook" target="_blank" rel="noopener">Docbook</a>。Markdown增强版中比较有名的有Markdown Extra、MultiMarkdown、 Maruku等。这些衍生版本要么基于工具，如<a href="https://baike.baidu.com/item/Pandoc" target="_blank" rel="noopener">Pandoc</a>；要么基于网站，如<a href="https://baike.baidu.com/item/GitHub" target="_blank" rel="noopener">GitHub</a>和<a href="https://baike.baidu.com/item/Wikipedia" target="_blank" rel="noopener">Wikipedia</a>，在语法上基本兼容，但在一些语法和渲染效果上有改动。</p><p>详细语法见<a href="http://www.markdown.cn/" title="Markdown" target="_blank" rel="noopener">Markdown中文教程官网</a></p></blockquote><h1 id="二、Markdown的优点"><a href="#二、Markdown的优点" class="headerlink" title="二、Markdown的优点"></a>二、Markdown的优点</h1><ul><li>专注你的文字内容而不是排版样式，安心写作。</li><li>轻松的导出 HTML、PDF 和本身的 .md 文件。</li><li>纯文本内容，兼容所有的文本编辑器与字处理软件。</li><li>随时修改你的文章版本，不必像字处理软件生成若干文件版本导致混乱。</li><li>可读、直观、学习成本低。</li></ul><h1 id="三、什么是Typora"><a href="#三、什么是Typora" class="headerlink" title="三、什么是Typora"></a>三、什么是Typora</h1><p><img src="/2019/04/02/Markdown学习笔记--开始使用Typora编辑器/2019-04-02.png" alt="Typora"></p><blockquote><p>Typora是一款轻便简洁的Markdown编辑器，支持即时渲染技术，这也是与其他Markdown编辑器最显著的区别。即时渲染使得你写Markdown就想是写Word文档一样流畅自如，不像其他编辑器的有编辑栏和显示栏。<br> Typora官网：<a href="https://www.typora.io/" title="Typora" target="_blank" rel="noopener">Typora</a></p></blockquote><h1 id="四、使用Typora简易方法"><a href="#四、使用Typora简易方法" class="headerlink" title="四、使用Typora简易方法"></a>四、使用Typora简易方法</h1><h2 id="区块元素"><a href="#区块元素" class="headerlink" title="区块元素"></a>区块元素</h2><h3 id="段落和换行"><a href="#段落和换行" class="headerlink" title="段落和换行"></a>段落和换行</h3><p>一个 Markdown 段落是由一个或多个连续的文本行组成，它的前后要有一个以上的空行（空行的定义是显示上看起来像是空的，便会被视为空行。比方说，若某一行只包含空格和制表符，则该行也会被视为空行）。普通段落不该用空格或制表符来缩进。</p><p>「由一个或多个连续的文本行组成」这句话其实暗示了 Markdown 允许段落内的强迫换行（插入换行符），这个特性和其他大部分的  text-to-HTML 格式不一样（包括 Movable Type 的「Convert Line  Breaks」选项），其它的格式会把每个换行符都转成 <code>&lt;br /&gt;</code> 标签。</p><p>如果你确实想要依赖 Markdown 来插入<code>&lt;br /&gt;</code> 标签的话，在插入处先按入两个以上的空格然后回车。</p><p>的确，需要多费点事（多加空格）来产生<code>&lt;br /&gt;</code> ，但是简单地「每个换行都转换为<code>&lt;br /&gt;</code>」的方法在  Markdown 中并不适合， Markdown 中 email 式的 区块引用 和多段落的 列表  在使用换行来排版的时候，不但更好用，还更方便阅读。</p><h3 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h3><pre><code class="markdown">This is an H1=============This is an H2-------------# 这是 H1## 这是 H2###### 这是 H6</code></pre><h3 id="区块引用"><a href="#区块引用" class="headerlink" title="区块引用"></a>区块引用</h3><p>Markdown 标记区块引用是使用类似 email 中用 &gt; 的引用方式。如果你还熟悉在 email 信件中的引言部分，你就知道怎么在 Markdown 文件中建立一个区块引用，那会看起来像是你自己先断好行，然后在每行的最前面加上 &gt; ：</p><pre><code class="markdown">&gt; This is a blockquote with two paragraphs. This is first paragraph.&gt;&gt; This is second pragraph. Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.&gt; This is another blockquote with one paragraph. There is three empty line to seperate two blockquote.</code></pre><blockquote><blockquote><p>This is a blockquote with two paragraphs. This is first paragraph.</p><p>This is second pragraph. Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.</p></blockquote><blockquote><p>This is another blockquote with one paragraph. There is three empty line to seperate two blockquote.</p></blockquote></blockquote><h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><p>Markdown 支持有序列表和无序列表。<br>无序列表使用星号、加号或是减号作为列表标记：</p><pre><code class="markdown">*   Red*   Green*   Blue</code></pre><p>有序列表则使用数字接着一个英文句点：</p><pre><code class="markdown">1.  Bird2.  McHale3.  Parish</code></pre><p>任务表</p><pre><code class="markdown">- [ ] a task list item- [ ] list syntax required- [ ] normal **formatting**, @mentions, #1234 refs- [ ] incomplete- [x] completed</code></pre><ul><li style="list-style: none"><input type="checkbox"> a task list item</li><li style="list-style: none"><input type="checkbox"> list syntax required</li><li style="list-style: none"><input type="checkbox"> normal <strong>formatting</strong>, @mentions, #1234 refs</li><li style="list-style: none"><input type="checkbox"> incomplete</li><li style="list-style: none"><input type="checkbox" checked> completed</li></ul><h3 id="代码区块"><a href="#代码区块" class="headerlink" title="代码区块"></a>代码区块</h3><p>和程序相关的写作或是标签语言原始码通常会有已经排版好的代码区块，通常这些区块我们并不希望它以一般段落文件的方式去排版，而是照原来的样子显示，Markdown 会用 <code>&lt;pre&gt;</code> 和 <code>&lt;code&gt;</code> 标签来把代码区块包起来。</p><p>要在 Markdown 中建立代码区块很简单，只要简单地缩进 4 个空格或是 1 个制表符就可以，例如，下面的输入：</p><p>Here’s an example:</p><pre><code class="javascript">function test() {  console.log(&quot;notice the blank line before this function?&quot;);}</code></pre><p>syntax highlighting:</p><pre><code class="ruby">require &#39;redcarpet&#39;markdown = Redcarpet.new(&quot;Hello World!&quot;)puts markdown.to_html</code></pre><h3 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h3><p>你可以在一行中用三个以上的星号、减号、底线来建立一个分隔线，行内不能有其他东西。你也可以在星号或是减号中间插入空格。下面每种写法都可以建立分隔线：</p><pre><code class="markdown">* * *********- - ----------------------------------------</code></pre><h3 id="YAML-Front-Matter"><a href="#YAML-Front-Matter" class="headerlink" title="YAML Front Matter"></a>YAML Front Matter</h3><p>Typora现在支持 <a href="http://jekyllrb.com/docs/frontmatter/" target="_blank" rel="noopener">YAML Front Matter</a>. 在文章的顶部输入 <code>---</code>然后按下回车即可。</p><h3 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h3><p>输入<code>[toc]</code>然后回车，即可创建一个“目录”。toc从文档中提取所有标题，其内容将自动更新。</p><h2 id="区段元素"><a href="#区段元素" class="headerlink" title="区段元素"></a>区段元素</h2><h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><p>Markdown 支持两种形式的链接语法： 行内式和参考式两种形式。</p><p>不管是哪一种，链接文字都是用 [方括号] 来标记。</p><p>要建立一个行内式的链接，只要在方块括号后面紧接着圆括号并插入网址链接即可，如果你还想要加上链接的 title 文字，只要在网址后面，用双引号把 title 文字包起来即可，例如：</p><pre><code class="markdown">This is [an example](http://example.com/ &quot;Title&quot;) inline link.[This link](http://example.net/) has no title attribute.</code></pre><h3 id="强调"><a href="#强调" class="headerlink" title="强调"></a>强调</h3><p>Markdown 使用星号（<em>）和底线（_）作为标记强调字词的符号，被 </em> 或 _ 包围的字词会被转成用 <em> 标签包围，用两个 * 或 _ 包起来的话，则会被转成 <strong>，例如：</strong></em></p><pre><code class="markdown">*single asterisks*_single underscores_**double asterisks**__double underscores__</code></pre><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>如果要标记一小段行内代码，你可以用反引号把它包起来（`），例如：</p><pre><code class="markdown">Use the `printf()` function.</code></pre><h3 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h3><p>很明显地，要在纯文字应用中设计一个「自然」的语法来插入图片是有一定难度的。</p><p>Markdown 使用一种和链接很相似的语法来标记图片，同样也允许两种样式： 行内式和参考式。</p><p>行内式的图片语法看起来像是：</p><pre><code class="markdown">![Alt text](/path/to/img.jpg)![Alt text](/path/to/img.jpg &quot;Optional title&quot;)</code></pre><h3 id="删除线"><a href="#删除线" class="headerlink" title="删除线"></a>删除线</h3><p><code>~~Mistaken text.~~</code> becomes <del>Mistaken text.</del></p><h3 id="下划线"><a href="#下划线" class="headerlink" title="下划线"></a>下划线</h3><p>Underline is powered by raw HTML.</p><p><code>&lt;u&gt;Underline&lt;/u&gt;</code> becomes <u>Underline</u>.</p><h3 id="Emoji-smile"><a href="#Emoji-smile" class="headerlink" title="Emoji :smile:"></a>Emoji :smile:</h3><p>Input emoji with syntax <code>:smile:</code>.</p><h4 id="嵌入内容"><a href="#嵌入内容" class="headerlink" title="嵌入内容"></a>嵌入内容</h4><pre><code class="markdown">&lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; width=330 height=86 src=&quot;//music.163.com/outchain/player?type=2&amp;id=31563481&amp;auto=1&amp;height=66&quot;&gt;&lt;/iframe&gt;</code></pre><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=31563481&auto=1&height=66"></iframe><h3 id="Video"><a href="#Video" class="headerlink" title="Video"></a>Video</h3><p>You can use the <code>&lt;video&gt;</code> HTML tag to embed videos. For example:</p><pre><code class="Markdown">&lt;video src=&quot;xxx.mp4&quot; /&gt;</code></pre><p><a href="https://996.icu" target="_blank" rel="noopener"><img src="https://img.shields.io/badge/link-996.icu-red.svg" alt="996.icu"></a></p>]]></content>
      
      
      <categories>
          
          <category> 其他 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2019/03/01/hello-world/"/>
      <url>/2019/03/01/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre><code class="bash">$ hexo new &quot;My New Post&quot;</code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre><code class="bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre><code class="bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre><code class="bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title>关于我</title>
      <link href="/about/index.html"/>
      <url>/about/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>gallery</title>
      <link href="/gallery/index.html"/>
      <url>/gallery/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>links</title>
      <link href="/links/index.html"/>
      <url>/links/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>tags</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>timeline</title>
      <link href="/timeline/index.html"/>
      <url>/timeline/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
  
</search>
